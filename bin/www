#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('app:server');
var http = require('http');
var isDevelopment = app.get('env');

// only load browserSync if dev
if (isDevelopment) {
    var browserSync = require('browser-sync');
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, listening);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

function listening() {
    if (isDevelopment) {
        var webpack = require('webpack'),
            webpackConfig = require('../webpack.config.js');

        var config = {
            proxy: 'localhost:' + port,
            files: [
                'views/**/*.dust'
            ],
            notify: false
        };

        // fire off webpack if there's a change
        var bs = browserSync.create();
        bs.watch('resources/**/*').on('change', function() {
            webpack(webpackConfig, function(err, stats) {
                if (!err) {

                    // undocumented feature to reverse sort by field by adding a "!" in front of the field name
                    // this happens to mirror webpack's default behavior
                    var status = stats.toString({
                        colors: true,
                        hash: false,
                        chunks: false,
                        assetsSort: '!size'
                    });
                    console.log(status);
                    bs.reload();
                } else {
                    console.log(err);
                }
            });
        });
        bs.init(config, function(err, bs) {
            if (err) {
                console.log(err);
            }
        });
    }
}
